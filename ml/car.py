
"""Proyecto 1 - Modelo 1

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-xzNHXgWoSLuxkmqABijzhArMMm7ekhy

# Analisis del problema
El problema consiste en predecir el precio de venta de automóviles usados basado en diversas características del vehículo. Se cuenta con un conjunto de datos que incluye información relevante, como el año de fabricación, el precio original, los kilómetros recorridos, el tipo de combustible, el tipo de vendedor, la transmisión y el número de propietarios anteriores. El objetivo es utilizar estas variables para construir un modelo de predicción que estime de manera precisa el precio de venta de un automóvil, ayudando a compradores y vendedores a tomar decisiones informadas en el mercado de vehículos usados.

# Entendimiento de los datos

Car_Name: Nombre del automóvil (string).

Year: Año del modelo (int).

Selling_Price: Precio de venta del automóvil (float).

Present_Price: Precio original del automóvil (float).

Kms_Driven: Kilómetros recorridos (int).

Fuel_Type: Tipo de combustible (categoría: Petrol, Diesel, CNG).

Seller_Type: Tipo de vendedor (categoría: Dealer, Individual).

Transmission: Tipo de transmisión (categoría: Manual, Automatic).

Owner: Número de propietarios anteriores (int).

#Exploracion de datos
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Cargar el conjunto de datos
data = pd.read_csv('../datasets/car.csv')

# Convertir variables categóricas a numéricas
label_encoders = {}
categorical_columns = ['Fuel_Type', 'Seller_Type', 'Transmission']



label_encodings = {
    'Fuel_Type': {'CNG': 0, 'Diesel': 1, 'Petrol': 2},
    'Seller_Type': {'Dealer': 0, 'Individual': 1},
    'Transmission': {'Automatic': 0, 'Manual': 1}
}

# Reemplazar los valores categóricos con sus correspondientes valores numéricos
for column, mapping in label_encodings.items():
    data[column] = data[column].map(mapping)

# Separar las características y la variable objetivo
X = data.drop(columns=['Car_Name', 'Selling_Price'])
y = data['Selling_Price']

# Dividir los datos en conjuntos de entrenamiento y prueba
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)




"""# Modelo Machine learning"""

# Crear y entrenar el modelo
model = LinearRegression()
model.fit(X_train, y_train)

# Realizar predicciones
y_pred = model.predict(X_test)

# Evaluar el modelo
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f'Mean Squared Error: {mse:.2f}')
print(f'R² Score: {r2:.2f}')

# Comparar los precios reales con las predicciones
comparison = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})
print(comparison.head(10))

# Buscar los datos del primer auto en el conjunto de prueba

"""# Evaluaciones"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns


# Configuración de estilo para los gráficos
sns.set(style='whitegrid')

# # 1. Histograma del precio de venta
# plt.figure(figsize=(10, 6))
# sns.histplot(data['Selling_Price'], bins=30, kde=True)
# plt.title('Distribución del Precio de Venta')
# plt.xlabel('Precio de Venta')
# plt.ylabel('Frecuencia')
# plt.show()

# 2. Gráfico de dispersión entre el precio de venta y el año
plt.figure(figsize=(10, 6))
sns.scatterplot(x='Year', y='Selling_Price', data=data, hue='Fuel_Type', palette='Set1')
plt.title('Precio de Venta vs. Año del Modelo')
plt.xlabel('Año del Modelo')
plt.ylabel('Precio de Venta')
plt.legend(title='Tipo de Combustible')
plt.show()

# 3. Boxplot del precio de venta por tipo de combustible
plt.figure(figsize=(10, 6))
sns.boxplot(x='Fuel_Type', y='Selling_Price', data=data)
plt.title('Precio de Venta por Tipo de Combustible')
plt.xlabel('Tipo de Combustible')
plt.ylabel('Precio de Venta')
plt.show()

# 4. Gráfico de barras del número de automóviles por tipo de vendedor
plt.figure(figsize=(10, 6))
sns.countplot(x='Seller_Type', data=data, palette='Set2')
plt.title('Número de Automóviles por Tipo de Vendedor')
plt.xlabel('Tipo de Vendedor')
plt.ylabel('Número de Automóviles')
plt.show()

# 5. Gráfico de dispersión entre kilómetros recorridos y precio de venta
plt.figure(figsize=(10, 6))
sns.scatterplot(x='Kms_Driven', y='Selling_Price', data=data, hue='Transmission', palette='Set2')
plt.title('Precio de Venta vs. Kilómetros Recorridos')
plt.xlabel('Kilómetros Recorridos')
plt.ylabel('Precio de Venta')
plt.legend(title='Transmisión')
plt.show()

"""# Resultados


El modelo de regresión lineal ajustado para predecir el precio de venta de los automóviles muestra un rendimiento aceptable con un Mean Squared Error (MSE) de 3.53. Esto indica que, en promedio, las predicciones del modelo se desvían en 3.53 unidades del precio real. Además, el R² Score de 0.85 sugiere que el modelo explica aproximadamente el 85% de la variabilidad en los precios de venta, lo que refleja un buen ajuste del modelo. Sin embargo, aunque el modelo captura la mayoría de las variaciones, existe un margen de error que podría mejorarse con técnicas más avanzadas o un mayor refinamiento en el preprocesamiento de los datos.
"""

# Guardar el modelo
import joblib

joblib.dump(model, '../models/car.pkl')
